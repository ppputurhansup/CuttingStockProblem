# --- ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö ---
if orders and st.button("üöÄ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì"):
    results = {}
    algorithms = {
        "FFD Rotated": first_fit_decreasing_rotated,
        "BFD Rotated": best_fit_decreasing_rotated,
        "Guillotine Rotated": guillotine_cutting_rotated
    }

    kpi_rows = []
    total_used_area = sum(w * l for w, l in orders)  # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á

    for name, algo in algorithms.items():
        start_time = time.time()
        if name != "Guillotine Rotated":
            shelves = algo(orders, sheet_width)

            # ‚úÖ ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ú‡πà‡∏ô (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏ä‡∏¥‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡∏î‡πÉ‡∏ô‡πÅ‡∏ú‡πà‡∏ô‡∏ô‡∏±‡πâ‡∏ô)
            max_used_length_per_sheet = [max(l for _, l, *_ in shelf) for shelf in shelves]
            total_used_length = sum(max_used_length_per_sheet)  # ‚úÖ ‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

            # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
            total_sheet_area = sheet_width * total_used_length
        else:
            placements, sheets = algo(orders, sheet_width)

            # ‚úÖ ‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å Guillotine
            total_used_length = max((y + used_l) for _, _, _, y, _, used_l, _ in placements) if placements else 0

            # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
            total_sheet_area = sheet_width * total_used_length

        # ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô total_waste ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ï‡∏¥‡∏î‡∏•‡∏ö
        total_waste = max(0, total_sheet_area - total_used_area)

        # ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô utilization_efficiency ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏ô 100%
        utilization_eff = min((total_used_area / total_sheet_area) * 100 if total_sheet_area > 0 else 0, 100)

        proc_time = time.time() - start_time

        # ‚úÖ **‡πÄ‡∏û‡∏¥‡πà‡∏° total length used ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô KPI Summary**
        kpi_rows.append({
            "Algorithm": name,
            "Total Length Used (cm)": round(total_used_length, 2),  # üî• ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ô‡∏µ‡πâ!
            "Total Waste (cm¬≤)": round(total_waste, 2),
            "Utilization Efficiency (%)": f"{round(utilization_eff, 2)}%",
            "Processing Time (s)": round(proc_time, 6)
        })

        results[name] = shelves if name != "Guillotine Rotated" else (placements, sheets, total_used_length)

    st.session_state.kpi_df = pd.DataFrame(kpi_rows)
    st.session_state.results = results
    st.session_state.calculated = True

if "calculated" not in st.session_state:
    st.session_state.calculated = False
if "results" not in st.session_state:
    st.session_state.results = {}
if "kpi_df" not in st.session_state:
    st.session_state.kpi_df = pd.DataFrame()

# --- ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• KPI ‡πÅ‡∏•‡∏∞ Visualization ---
if st.session_state.calculated:
    st.subheader("üìå KPI Summary")
    st.dataframe(st.session_state.kpi_df)  # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á KPI Summary ‡∏û‡∏£‡πâ‡∏≠‡∏° Total Length Used
